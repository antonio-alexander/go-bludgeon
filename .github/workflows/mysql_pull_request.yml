name: mysql

on:
  pull_request:
    branches:
      - main
    paths:
      - "mysql/**"
      - ".github/workflows/mysql_pull_request.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  environment:
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
      GITHUB_BASE_REF: ${{ github.base_ref }}
    steps:
      - name: Get git target
        run: |
          git_target=`echo $GITHUB_BASE_REF | sed 's/refs\/heads\///'`
          git_target=`echo $git_target | sed 's/refs\/tags\///'`
          git_target=`echo $git_target| sed 's/refs\\///'`
          echo $git_target
          echo "git_target=$git_target" >> $GITHUB_ENV
      - name: Get git source
        run: |
          git_source=`echo $GITHUB_HEAD_REF | sed 's/refs\/heads\///'`
          git_source=`echo $git_source | sed 's/refs\/tags\///'`
          git_source=`echo $git_source | sed 's/refs\\///'`
          echo $git_source
          echo "git_source=$git_source" >> $GITHUB_ENV
      - name: Get git SHA
        run: |
          git_sha=`echo $GITHUB_SHA`
          echo $git_sha
          echo "git_sha=$git_sha" >> $GITHUB_ENV
      - name: Checkout repository code (source)
        uses: actions/checkout@v3
      - name: Get source version
        run: |
          version_source=`cat /home/runner/work/go-bludgeon/go-bludgeon/mysql/version.json  | jq '.Version' | sed 's/"//g'`
          echo $version_source
          echo "version_source=$version_source" >> $GITHUB_ENV
      - name: Checkout repository code (target)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      - name: Get target version
        run: |
          version_source=`cat /home/runner/work/go-bludgeon/go-bludgeon/mysql/version.json  | jq '.Version' | sed 's/"//g'`
          echo $version_target
          echo "version_target=$version_target" >> $GITHUB_ENV
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          echo ${{ env.version_source }} >> /tmp/version_source
          echo ${{ env.version_target }} >> /tmp/version_target
          echo ${{ env.git_target }} >> /tmp/git_target
          echo ${{ env.git_source }} >> /tmp/git_source
          echo ${{ env.git_sha }} >> /tmp/git_sha
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/version_source
            /tmp/version_target
            /tmp/git_target
            /tmp/git_source
            /tmp/git_sha

  version_validate:
    needs: [environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version_source=`cat /tmp/version_source`
          echo "version_source=$version_source" >> $GITHUB_ENV
          version_target=`cat /tmp/version_target`
          echo "version_target=$version_target" >> $GITHUB_ENV
      - name: Compare versions
        run: |
          echo "Comparing version \"${{ env.version_source }}\" to target version \"${{ env.version_target }}\""
          if [ "${{ env.version_source }}" = "${{ env.version_target }}" ]; then
               echo "versions are the same, versions must be different"
               exit 1
          fi

  docker_build_images:
    needs: [environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PLATFORM_AMD64: linux/amd64
      PLATFORM_ARMV7: linux/arm/v7
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version_source`
          echo "version=$version" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Build docker mysql
        run: |
          cd mysql
          docker build --no-cache -f ./cmd/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }} \
            --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_branch_source }} --build-arg PLATFORM=$PLATFORM_AMD64 \
            --build-arg GO_ARCH=amd64
          docker build --no-cache -f ./cmd/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }} \
            --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_branch_source }} --build-arg PLATFORM=$PLATFORM_ARMV7 \
            --build-arg GO_ARCH=arm --build-arg GO_ARM=7
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-bludgeon-mysql_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }}
          docker save -o /tmp/go-bludgeon-mysql_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-mysql_amd64-${{ env.version }}.tar.gz
            /tmp/go-bludgeon-mysql_armv7-${{ env.version }}.tar.gz
          retention-days: 1
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f
