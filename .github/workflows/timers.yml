name: timers

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "timers/**"
      - ".github/workflows/timers.yml"
  pull_request:
    paths:
      - "timers/**"
      - ".github/workflows/timers.yml"
  release:
    types: [published]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  PLATFORM_AMD64: linux/amd64
  PLATFORM_ARMV7: linux/arm/v7

jobs:
  environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: Get target branch name
        run: |
          git_branch_target=`echo $GITHUB_BASE_REF | sed 's/refs\\///'`
          git_branch_target=`echo $git_branch_target | sed 's/refs\/heads\///'`
          git_branch_target=`echo $git_branch_target | sed 's/refs\/tags\///'`
          echo $git_branch_target
          echo "git_branch_target=$git_branch_target" >> $GITHUB_ENV
      - name: Get source branch name
        run: |
          git_branch_source=$GITHUB_HEAD_REF
          echo $git_branch_source
          echo "git_branch_source=$git_branch_source" >> $GITHUB_ENV
      - name: Get version
        run: |
          version=`cat /home/runner/work/go-bludgeon/go-bludgeon/version.json | jq '.Version' | sed 's/"//g'`
          echo $version
          echo "version=$version" >> $GITHUB_ENV
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          echo ${{ env.version }} >> /tmp/version
          echo ${{ env.git_branch_target }} >> /tmp/git_branch_target
          echo ${{ env.git_branch_source }} >> /tmp/git_branch_source
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/version
            /tmp/git_branch_target
            /tmp/git_branch_source

  version_validate:
    if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main'
    needs: [environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}
      - name: Get base version
        run: |
          base_version=`cat /home/runner/work/go-bludgeon/go-bludgeon/timers/version.json | jq '.Version' | sed 's/"//g'`
          echo "base_version=$base_version" >> $GITHUB_ENV
      - name: Compare versions
        run: |
          echo "Comparing version \"$version\" to base version \"$base_version\""
          if [ "$version" = "$base_version" ]; then
               echo "versions equal, verions must be different"
               exit 1
          fi

  go_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.16
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.44.2
          working-directory: ./timers
          args: --verbose

  go_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Test timers (exclude client)
        run: |
          cd /home/runner/work/go-bludgeon/go-bludgeon/timers
          go mod download
          docker compose up -d mysql
          go test -v $(go list ./... | grep -v /client/) -coverprofile /tmp/go-bludgeon-timers.out | tee /tmp/go-bludgeon-timers.log
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-timers.log
            /tmp/go-bludgeon-timers.out

  docker_build_images:
    needs: [go_test, environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
          git_branch_source=`cat /tmp/git_branch_source`
          echo "git_branch_source=$git_branch_source" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Build docker timers
        run: |
          cd timers
          docker build -f ./cmd/service/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_branch_source }}  --build-arg PLATFORM=$PLATFORM_AMD64 --build-arg GO_ARCH=amd64
          docker build -f ./cmd/service/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_branch_source }}  --build-arg PLATFORM=$PLATFORM_ARMV7 --build-arg GO_ARCH=arm --build-arg GO_ARM=7
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-bludgeon-timers_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }}
          docker save -o /tmp/go-bludgeon-timers_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-timers_amd64-${{ env.version }}.tar.gz
            /tmp/go-bludgeon-timers_armv7-${{ env.version }}.tar.gz
          retention-days: 1
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f

  docker_push_images:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    needs: [go_test_client, docker_build_images]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-bludgeon-timers_amd64-${{ env.version }}.tar.gz
          docker load -i /tmp/go-bludgeon-timers_armv7-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }}
      - name: Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_latest
      - name: Create/Push Docker manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }}
          docker manifest annotate --arch arm --os linux --variant 7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_${{ env.version }}
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:${{ env.version }} --purge
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_latest
          docker manifest annotate --arch arm --os linux --variant 7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:armv7_latest
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:latest --purge
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f

  go_test_client:
    needs: docker_build_images
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-bludgeon-timers_amd64-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-timers:latest
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Test timers client
        run: |
          cd /home/runner/work/go-bludgeon/go-bludgeon/timers/client
          go mod download
          docker compose up -d
          go test -v ./... -coverprofile /tmp/go-bludgeon-timers_client.out | tee /tmp/go-bludgeon-timers_client.log
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-timers_client.log
            /tmp/go-bludgeon-timers_client.out

  swagger_validate:
    needs: go_test_client
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Validate swagger spec
        run: |
          cd /home/runner/work/go-bludgeon/go-bludgeon/timers
          go mod download
          make validate-swagger

  swagger_generate:
    # if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    needs: swagger_validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: generate swagger.json
        run: |
          cd /home/runner/work/go-bludgeon/go-bludgeon/timers
          go mod download
          make swagger
          cp ./cmd/service/swagger.json /tmp/swagger.json
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/swagger.json

  git_push_tag:
    if: github.ref == 'refs/heads/develop' || github.event_name == 'release' || github.ref == 'refs/heads/main'
    needs: [go_test_client, go_lint, environment]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Push/Update version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          CUSTOM_TAG: timers/v${{ env.version }}
