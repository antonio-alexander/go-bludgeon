name: mysql

on:
  push:
    branches:
      - master
      - develop
    paths:
      - "cmd/mysql/**"
      - ".github/workflows/mysql.yml"
  pull_request:
    paths:
      - "cmd/mysql/**"
      - ".github/workflows/mysql.yml"
  release:
    types: [published]
    paths:
      - "cmd/mysql/**"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  PLATFORM_AMD64: linux/amd64
  PLATFORM_ARMV7: linux/arm/v7

jobs:
  docker_build_images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Get Version
        run: |
          version=`cat /home/runner/work/go-bludgeon/go-bludgeon/cmd/mysql/version.json | jq '.Version' | sed 's/"//g'`
          echo "version=$version" >> $GITHUB_ENV
      - name: Build docker employees
        run: |
          github_ref=${GITHUB_REF##refs/heads/}
          github_ref=${GITHUB_REF##refs/tags/}
          docker build -f ./cmd/mysql/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_AMD64
          docker build -f ./cmd/mysql/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_ARMV7
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-bludgeon-mysql_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }}
          docker save -o /tmp/go-bludgeon-mysql_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }}
          echo ${{ env.version }} >> /tmp/version
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-mysql_amd64-${{ env.version }}.tar.gz
            /tmp/go-bludgeon-mysql_armv7-${{ env.version }}.tar.gz
            /tmp/version
          retention-days: 1
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f

  docker_push_images:
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: docker_build_images
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-bludgeon-mysql_amd64-${{ env.version }}.tar.gz
          docker load -i /tmp/go-bludgeon-mysql_armv7-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_latest
      - name: Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }} 
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }} 
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_latest
      - name: Create/Push Docker manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }}
          docker manifest annotate --arch arm --os linux --variant 7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_${{ env.version }}
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ env.version }} --purge
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:amd64_latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_latest
          docker manifest annotate --arch arm --os linux --variant 7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:armv7_latest
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:latest --purge
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f
