name: changes_pull_request

on:
  pull_request:
    branches:
      - main
    paths:
      - "changes/**"
      - ".github/workflows/changes_pull_request.yml"

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  LINTER_VERSION: "v1.51.2"
  GO_VERSION: "1.19"

jobs:
  environment:
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
      GITHUB_BASE_REF: ${{ github.base_ref }}
    steps:
      - name: Get git target
        run: |
          git_target=`echo $GITHUB_BASE_REF | sed 's/refs\/heads\///'`
          git_target=`echo $git_target | sed 's/refs\/tags\///'`
          git_target=`echo $git_target| sed 's/refs\\///'`
          echo $git_target
          echo "git_target=$git_target" >> $GITHUB_ENV
      - name: Get git source
        run: |
          git_source=`echo $GITHUB_HEAD_REF | sed 's/refs\/heads\///'`
          git_source=`echo $git_source | sed 's/refs\/tags\///'`
          git_source=`echo $git_source | sed 's/refs\\///'`
          echo $git_source
          echo "git_source=$git_source" >> $GITHUB_ENV
      - name: Get git SHA
        run: |
          git_sha=`echo $GITHUB_SHA`
          echo $git_sha
          echo "git_sha=$git_sha" >> $GITHUB_ENV
      - name: Checkout repository code (source)
        uses: actions/checkout@v3
      - name: Get source version
        run: |
          version_source=`cat /home/runner/work/go-bludgeon/go-bludgeon/changes/version.json | jq '.Version' | sed 's/"//g'`
          echo $version_source
          echo "version_source=$version_source" >> $GITHUB_ENV
      - name: Checkout repository code (target)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      - name: Get target version
        run: |
          version_target=`cat /home/runner/work/go-bludgeon/go-bludgeon/changes/version.json | jq '.Version' | sed 's/"//g'`
          echo $version_target
          echo "version_target=$version_target" >> $GITHUB_ENV
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          echo ${{ env.version_source }} >> /tmp/version_source
          echo ${{ env.version_target }} >> /tmp/version_target
          echo ${{ env.git_target }} >> /tmp/git_target
          echo ${{ env.git_source }} >> /tmp/git_source
          echo ${{ env.git_sha }} >> /tmp/git_sha
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/version_source
            /tmp/version_target
            /tmp/git_target
            /tmp/git_source
            /tmp/git_sha

  go_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.LINTER_VERSION }}
          working-directory: ./changes
          args: --verbose

  version_validate:
    needs: [environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version_source=`cat /tmp/version_source`
          echo "version_source=$version_source" >> $GITHUB_ENV
          version_target=`cat /tmp/version_target`
          echo "version_target=$version_target" >> $GITHUB_ENV
      - name: Compare versions
        run: |
          echo "Comparing version \"${{ env.version_source }}\" to target version \"${{ env.version_target }}\""
          if [ "${{ env.version_source }}" = "${{ env.version_target }}" ]; then
               echo "versions are the same, versions must be different"
               exit 1
          fi
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Validate Version Updated
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          echo "checking to see if version.json updated"
          git fetch origin main:refs/remotes/origin/main
          git_diff_output=`git diff origin/main --name-only | grep changes/version.json`
          if [ "$git_diff_output" != "changes/version.json" ]; then
               echo "version.json has not been updated, version.json must be updated for a pull request"
          fi
      - name: Validate Changelog Updated
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          echo "checking to see if CHANGELOG.md updated"
          git fetch origin main:refs/remotes/origin/main
          git_diff_output=`git diff origin/main --name-only | grep changes/CHANGELOG.md`
          if [ "$git_diff_output" != "changes/CHANGELOG.md" ]; then
               echo "CHANGELOG.md has not been updated, CHANGELOG.md must be updated for a pull request"
          fi
      - name: Validate Git Tag
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          git fetch --tags
          echo checking for tag v$version
          tag=`git tag --list v$version`
          if [ -z "$tag" ]; then
            echo "tag v$version doesn't exist"
          else
            echo "tag v$version exists"
            exit 1
          fi

  go_test:
    needs: [go_lint, version_validate]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Test changes (exclude client)
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          go mod download
          make dep
          go test -v -parallel=1 -cover -count=1 $(go list ./... | grep -v /client/) -coverprofile /tmp/go-bludgeon-changes.out | tee /tmp/go-bludgeon-changes.log; test ${PIPESTATUS[0]} -eq 0
          docker compose logs >> /tmp/go-bludgeon-changes_services.log
      - name: Docker clean-up
        if: always()
        run: |
          make stop
          docker image prune -f
          docker container prune -f
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-changes.log
            /tmp/go-bludgeon-changes.out
            /tmp/go-bludgeon-changes_services.log

  docker_build_image_amd64:
    needs: [environment, go_test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PLATFORM_AMD64: linux/amd64
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version_source`
          echo "version=$version" >> $GITHUB_ENV
          git_source=`cat /tmp/git_source`
          echo "git_source=$git_source" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Build docker changes
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          docker build -f ./cmd/service/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:amd64_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_source }} --build-arg PLATFORM=$PLATFORM_AMD64 --build-arg GO_ARCH=amd64
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-bludgeon-changes_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:amd64_${{ env.version }}
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-changes_amd64-${{ env.version }}.tar.gz
          retention-days: 1
      - name: Docker clean-up
        if: always()
        run: |
          docker image prune -f
          docker container prune -f

  docker_build_image_armv7:
    needs: [environment, go_test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PLATFORM_ARMV7: linux/arm/v7
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version_source`
          echo "version=$version" >> $GITHUB_ENV
          git_source=`cat /tmp/git_source`
          echo "git_source=$git_source" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Build docker changes
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          docker build -f ./cmd/service/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:armv7_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=${{ env.git_source }} --build-arg PLATFORM=$PLATFORM_ARMV7 --build-arg GO_ARCH=arm --build-arg GO_ARM=7
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-bludgeon-changes_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:armv7_${{ env.version }}
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-changes_armv7-${{ env.version }}.tar.gz
          retention-days: 1
      - name: Docker clean-up
        if: always()
        run: |
          docker image prune -f
          docker container prune -f

  docker_test:
    needs: [docker_build_image_amd64, docker_build_image_armv7]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version_source`
          echo "version=$version" >> $GITHUB_ENV
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-bludgeon-changes_amd64-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:latest
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Test Docker Image
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          make run
          if [ `docker inspect --format='{{ .State.Health.Status}}' changes` != "healthy" ]; then
               echo "container is not healthy"
               exit 1
          fi
          make stop

  go_test_client:
    needs: [environment, docker_test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: /tmp
      - name: Get environment
        run: |
          version=`cat /tmp/version_source`
          echo "version=$version" >> $GITHUB_ENV
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-bludgeon-changes_amd64-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-changes:latest
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Test changes client
        working-directory: /home/runner/work/go-bludgeon/go-bludgeon/changes
        run: |
          go mod download
          make run
          go test -v -parallel=1 -cover -count=1 ./client/... -coverprofile /tmp/go-bludgeon-changes-client.out | tee /tmp/go-bludgeon-changes-client.log; test ${PIPESTATUS[0]} -eq 0
          docker compose logs >> /tmp/go-bludgeon-changes-client_services.log
      - name: Docker clean-up
        if: always()
        run: |
          make stop
          docker image prune -f
          docker container prune -f
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            /tmp/go-bludgeon-changes-client.log
            /tmp/go-bludgeon-changes-client.out
            /tmp/go-bludgeon-changes-client_services.log
