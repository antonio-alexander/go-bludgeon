// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: timers.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimersClient is the client API for Timers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimersClient interface {
	// timer_create
	TimerCreate(ctx context.Context, in *TimerCreateRequest, opts ...grpc.CallOption) (*TimerCreateResponse, error)
	// timer_read
	TimerRead(ctx context.Context, in *TimerReadRequest, opts ...grpc.CallOption) (*TimerReadResponse, error)
	// timer_delete
	TimerDelete(ctx context.Context, in *TimerDeleteRequest, opts ...grpc.CallOption) (*TimerDeleteResponse, error)
	// timers_read
	TimersRead(ctx context.Context, in *TimersReadRequest, opts ...grpc.CallOption) (*TimersReadResponse, error)
	// timer_update_comment
	TimerUpdateComment(ctx context.Context, in *TimerUpdateCommentRequest, opts ...grpc.CallOption) (*TimerUpdateCommentResponse, error)
	// timer_archive
	TimerArchive(ctx context.Context, in *TimerArchiveRequest, opts ...grpc.CallOption) (*TimerArchiveResponse, error)
	// timer_start
	TimerStart(ctx context.Context, in *TimerStartRequest, opts ...grpc.CallOption) (*TimerStartResponse, error)
	// timer_stop
	TimerStop(ctx context.Context, in *TimerStopRequest, opts ...grpc.CallOption) (*TimerStopResponse, error)
	// timer_submit
	TimerSubmit(ctx context.Context, in *TimerSubmitRequest, opts ...grpc.CallOption) (*TimerSubmitResponse, error)
}

type timersClient struct {
	cc grpc.ClientConnInterface
}

func NewTimersClient(cc grpc.ClientConnInterface) TimersClient {
	return &timersClient{cc}
}

func (c *timersClient) TimerCreate(ctx context.Context, in *TimerCreateRequest, opts ...grpc.CallOption) (*TimerCreateResponse, error) {
	out := new(TimerCreateResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerRead(ctx context.Context, in *TimerReadRequest, opts ...grpc.CallOption) (*TimerReadResponse, error) {
	out := new(TimerReadResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerDelete(ctx context.Context, in *TimerDeleteRequest, opts ...grpc.CallOption) (*TimerDeleteResponse, error) {
	out := new(TimerDeleteResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimersRead(ctx context.Context, in *TimersReadRequest, opts ...grpc.CallOption) (*TimersReadResponse, error) {
	out := new(TimersReadResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timers_read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerUpdateComment(ctx context.Context, in *TimerUpdateCommentRequest, opts ...grpc.CallOption) (*TimerUpdateCommentResponse, error) {
	out := new(TimerUpdateCommentResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_update_comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerArchive(ctx context.Context, in *TimerArchiveRequest, opts ...grpc.CallOption) (*TimerArchiveResponse, error) {
	out := new(TimerArchiveResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerStart(ctx context.Context, in *TimerStartRequest, opts ...grpc.CallOption) (*TimerStartResponse, error) {
	out := new(TimerStartResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerStop(ctx context.Context, in *TimerStopRequest, opts ...grpc.CallOption) (*TimerStopResponse, error) {
	out := new(TimerStopResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) TimerSubmit(ctx context.Context, in *TimerSubmitRequest, opts ...grpc.CallOption) (*TimerSubmitResponse, error) {
	out := new(TimerSubmitResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.Timers/timer_submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimersServer is the server API for Timers service.
// All implementations must embed UnimplementedTimersServer
// for forward compatibility
type TimersServer interface {
	// timer_create
	TimerCreate(context.Context, *TimerCreateRequest) (*TimerCreateResponse, error)
	// timer_read
	TimerRead(context.Context, *TimerReadRequest) (*TimerReadResponse, error)
	// timer_delete
	TimerDelete(context.Context, *TimerDeleteRequest) (*TimerDeleteResponse, error)
	// timers_read
	TimersRead(context.Context, *TimersReadRequest) (*TimersReadResponse, error)
	// timer_update_comment
	TimerUpdateComment(context.Context, *TimerUpdateCommentRequest) (*TimerUpdateCommentResponse, error)
	// timer_archive
	TimerArchive(context.Context, *TimerArchiveRequest) (*TimerArchiveResponse, error)
	// timer_start
	TimerStart(context.Context, *TimerStartRequest) (*TimerStartResponse, error)
	// timer_stop
	TimerStop(context.Context, *TimerStopRequest) (*TimerStopResponse, error)
	// timer_submit
	TimerSubmit(context.Context, *TimerSubmitRequest) (*TimerSubmitResponse, error)
	mustEmbedUnimplementedTimersServer()
}

// UnimplementedTimersServer must be embedded to have forward compatible implementations.
type UnimplementedTimersServer struct {
}

func (UnimplementedTimersServer) TimerCreate(context.Context, *TimerCreateRequest) (*TimerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerCreate not implemented")
}
func (UnimplementedTimersServer) TimerRead(context.Context, *TimerReadRequest) (*TimerReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerRead not implemented")
}
func (UnimplementedTimersServer) TimerDelete(context.Context, *TimerDeleteRequest) (*TimerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerDelete not implemented")
}
func (UnimplementedTimersServer) TimersRead(context.Context, *TimersReadRequest) (*TimersReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimersRead not implemented")
}
func (UnimplementedTimersServer) TimerUpdateComment(context.Context, *TimerUpdateCommentRequest) (*TimerUpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerUpdateComment not implemented")
}
func (UnimplementedTimersServer) TimerArchive(context.Context, *TimerArchiveRequest) (*TimerArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerArchive not implemented")
}
func (UnimplementedTimersServer) TimerStart(context.Context, *TimerStartRequest) (*TimerStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerStart not implemented")
}
func (UnimplementedTimersServer) TimerStop(context.Context, *TimerStopRequest) (*TimerStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerStop not implemented")
}
func (UnimplementedTimersServer) TimerSubmit(context.Context, *TimerSubmitRequest) (*TimerSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimerSubmit not implemented")
}
func (UnimplementedTimersServer) mustEmbedUnimplementedTimersServer() {}

// UnsafeTimersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimersServer will
// result in compilation errors.
type UnsafeTimersServer interface {
	mustEmbedUnimplementedTimersServer()
}

func RegisterTimersServer(s grpc.ServiceRegistrar, srv TimersServer) {
	s.RegisterService(&Timers_ServiceDesc, srv)
}

func _Timers_TimerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerCreate(ctx, req.(*TimerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerRead(ctx, req.(*TimerReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerDelete(ctx, req.(*TimerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimersRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimersReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimersRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timers_read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimersRead(ctx, req.(*TimersReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerUpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerUpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerUpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_update_comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerUpdateComment(ctx, req.(*TimerUpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerArchive(ctx, req.(*TimerArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerStart(ctx, req.(*TimerStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerStop(ctx, req.(*TimerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_TimerSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimerSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).TimerSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.Timers/timer_submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).TimerSubmit(ctx, req.(*TimerSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timers_ServiceDesc is the grpc.ServiceDesc for Timers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_bludgeon_timers.Timers",
	HandlerType: (*TimersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "timer_create",
			Handler:    _Timers_TimerCreate_Handler,
		},
		{
			MethodName: "timer_read",
			Handler:    _Timers_TimerRead_Handler,
		},
		{
			MethodName: "timer_delete",
			Handler:    _Timers_TimerDelete_Handler,
		},
		{
			MethodName: "timers_read",
			Handler:    _Timers_TimersRead_Handler,
		},
		{
			MethodName: "timer_update_comment",
			Handler:    _Timers_TimerUpdateComment_Handler,
		},
		{
			MethodName: "timer_archive",
			Handler:    _Timers_TimerArchive_Handler,
		},
		{
			MethodName: "timer_start",
			Handler:    _Timers_TimerStart_Handler,
		},
		{
			MethodName: "timer_stop",
			Handler:    _Timers_TimerStop_Handler,
		},
		{
			MethodName: "timer_submit",
			Handler:    _Timers_TimerSubmit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timers.proto",
}
