// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: timeslices.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeSlicesClient is the client API for TimeSlices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSlicesClient interface {
	// time_slice_create
	TimeSliceCreate(ctx context.Context, in *TimeSliceCreateRequest, opts ...grpc.CallOption) (*TimeSliceCreateResponse, error)
	// time_slice_read
	TimeSliceRead(ctx context.Context, in *TimeSliceReadRequest, opts ...grpc.CallOption) (*TimeSliceReadResponse, error)
	// time_slice_update
	TimeSliceUpdate(ctx context.Context, in *TimeSliceUpdateRequest, opts ...grpc.CallOption) (*TimeSliceUpdateResponse, error)
	// time_slice_delete
	TimeSliceDelete(ctx context.Context, in *TimeSliceDeleteRequest, opts ...grpc.CallOption) (*TimeSliceDeleteResponse, error)
	// time_slices_read
	TimeSlicesRead(ctx context.Context, in *TimeSlicesReadRequest, opts ...grpc.CallOption) (*TimeSlicesReadResponse, error)
}

type timeSlicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSlicesClient(cc grpc.ClientConnInterface) TimeSlicesClient {
	return &timeSlicesClient{cc}
}

func (c *timeSlicesClient) TimeSliceCreate(ctx context.Context, in *TimeSliceCreateRequest, opts ...grpc.CallOption) (*TimeSliceCreateResponse, error) {
	out := new(TimeSliceCreateResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.TimeSlices/time_slice_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSlicesClient) TimeSliceRead(ctx context.Context, in *TimeSliceReadRequest, opts ...grpc.CallOption) (*TimeSliceReadResponse, error) {
	out := new(TimeSliceReadResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.TimeSlices/time_slice_read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSlicesClient) TimeSliceUpdate(ctx context.Context, in *TimeSliceUpdateRequest, opts ...grpc.CallOption) (*TimeSliceUpdateResponse, error) {
	out := new(TimeSliceUpdateResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.TimeSlices/time_slice_update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSlicesClient) TimeSliceDelete(ctx context.Context, in *TimeSliceDeleteRequest, opts ...grpc.CallOption) (*TimeSliceDeleteResponse, error) {
	out := new(TimeSliceDeleteResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.TimeSlices/time_slice_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSlicesClient) TimeSlicesRead(ctx context.Context, in *TimeSlicesReadRequest, opts ...grpc.CallOption) (*TimeSlicesReadResponse, error) {
	out := new(TimeSlicesReadResponse)
	err := c.cc.Invoke(ctx, "/go_bludgeon_timers.TimeSlices/time_slices_read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSlicesServer is the server API for TimeSlices service.
// All implementations must embed UnimplementedTimeSlicesServer
// for forward compatibility
type TimeSlicesServer interface {
	// time_slice_create
	TimeSliceCreate(context.Context, *TimeSliceCreateRequest) (*TimeSliceCreateResponse, error)
	// time_slice_read
	TimeSliceRead(context.Context, *TimeSliceReadRequest) (*TimeSliceReadResponse, error)
	// time_slice_update
	TimeSliceUpdate(context.Context, *TimeSliceUpdateRequest) (*TimeSliceUpdateResponse, error)
	// time_slice_delete
	TimeSliceDelete(context.Context, *TimeSliceDeleteRequest) (*TimeSliceDeleteResponse, error)
	// time_slices_read
	TimeSlicesRead(context.Context, *TimeSlicesReadRequest) (*TimeSlicesReadResponse, error)
	mustEmbedUnimplementedTimeSlicesServer()
}

// UnimplementedTimeSlicesServer must be embedded to have forward compatible implementations.
type UnimplementedTimeSlicesServer struct {
}

func (UnimplementedTimeSlicesServer) TimeSliceCreate(context.Context, *TimeSliceCreateRequest) (*TimeSliceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSliceCreate not implemented")
}
func (UnimplementedTimeSlicesServer) TimeSliceRead(context.Context, *TimeSliceReadRequest) (*TimeSliceReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSliceRead not implemented")
}
func (UnimplementedTimeSlicesServer) TimeSliceUpdate(context.Context, *TimeSliceUpdateRequest) (*TimeSliceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSliceUpdate not implemented")
}
func (UnimplementedTimeSlicesServer) TimeSliceDelete(context.Context, *TimeSliceDeleteRequest) (*TimeSliceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSliceDelete not implemented")
}
func (UnimplementedTimeSlicesServer) TimeSlicesRead(context.Context, *TimeSlicesReadRequest) (*TimeSlicesReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSlicesRead not implemented")
}
func (UnimplementedTimeSlicesServer) mustEmbedUnimplementedTimeSlicesServer() {}

// UnsafeTimeSlicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSlicesServer will
// result in compilation errors.
type UnsafeTimeSlicesServer interface {
	mustEmbedUnimplementedTimeSlicesServer()
}

func RegisterTimeSlicesServer(s grpc.ServiceRegistrar, srv TimeSlicesServer) {
	s.RegisterService(&TimeSlices_ServiceDesc, srv)
}

func _TimeSlices_TimeSliceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSliceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlicesServer).TimeSliceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.TimeSlices/time_slice_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlicesServer).TimeSliceCreate(ctx, req.(*TimeSliceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSlices_TimeSliceRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSliceReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlicesServer).TimeSliceRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.TimeSlices/time_slice_read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlicesServer).TimeSliceRead(ctx, req.(*TimeSliceReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSlices_TimeSliceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSliceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlicesServer).TimeSliceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.TimeSlices/time_slice_update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlicesServer).TimeSliceUpdate(ctx, req.(*TimeSliceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSlices_TimeSliceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSliceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlicesServer).TimeSliceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.TimeSlices/time_slice_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlicesServer).TimeSliceDelete(ctx, req.(*TimeSliceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSlices_TimeSlicesRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSlicesReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlicesServer).TimeSlicesRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_bludgeon_timers.TimeSlices/time_slices_read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlicesServer).TimeSlicesRead(ctx, req.(*TimeSlicesReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeSlices_ServiceDesc is the grpc.ServiceDesc for TimeSlices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeSlices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_bludgeon_timers.TimeSlices",
	HandlerType: (*TimeSlicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "time_slice_create",
			Handler:    _TimeSlices_TimeSliceCreate_Handler,
		},
		{
			MethodName: "time_slice_read",
			Handler:    _TimeSlices_TimeSliceRead_Handler,
		},
		{
			MethodName: "time_slice_update",
			Handler:    _TimeSlices_TimeSliceUpdate_Handler,
		},
		{
			MethodName: "time_slice_delete",
			Handler:    _TimeSlices_TimeSliceDelete_Handler,
		},
		{
			MethodName: "time_slices_read",
			Handler:    _TimeSlices_TimeSlicesRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeslices.proto",
}
